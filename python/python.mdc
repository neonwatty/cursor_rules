---
description: 
globs: 
alwaysApply: false
---
# Python 3.12 Best Practices and Rules

- Use Python 3.12
- Frameworks:
  - pydantic
- Linting:
  - ruff
- Package Management:
  - uv

1. **Use Meaningful Names**: Choose descriptive variable, function, and class names.
2. **Follow PEP 8**: Adhere to the Python Enhancement Proposal 8 style guide for formatting.
3. **Use Docstrings**: Document functions and classes with docstrings to explain their purpose.
4. **Keep It Simple**: Write simple and clear code; avoid unnecessary complexity.
5. **Use List Comprehensions**: Prefer list comprehensions for creating lists over traditional loops when appropriate.
6. **Handle Exceptions**: Use try-except blocks to handle exceptions gracefully.
7. **Use Virtual Environments**: Isolate project dependencies using virtual environments (e.g., `venv`).
8. **Write Tests**: Implement unit tests to ensure code reliability.
9. **Use Type Hints**: Utilize type hints for better code clarity and type checking.
10. **Avoid Global Variables**: Limit the use of global variables to reduce side effects.
11. **Use Ruff for Linting**: Run `ruff` to enforce code style and catch common errors.
12. **Use uv for Package Management**: Use `uv` to manage and install project dependencies efficiently.

These rules will help you write clean, efficient, and maintainable Python code.
